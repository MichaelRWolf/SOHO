#! /bin/bash
set -euo pipefail



# Restore selected files from a local Time Machine snapshot on the ORIGINAL Mac
# Sends data to LOANER computer (named 'wolf-air') via rsync over SSH

LOGFILE="$HOME/restore_to_loaner_$(date +%Y%m%d_%H%M%S).log"
function log_it() {
    if (( $# > 0 )); then
        printf "%s\n" "$*" | tee -a "$LOGFILE"
    else
        tee -a "$LOGFILE"
    fi
}

SNAPSHOT_DATE="2025-03-28-131701"
SNAPSHOT_ROOT_PATH="/Volumes/com.apple.TimeMachine.${SNAPSHOT_DATE}.local"

BACKUP_HOME="$HOME"
RECOVERY_HOME="/Users/wendy"

# Hostnames
BACKUP_HOSTNAME="Wendys-MacBook"
RESTORE_HOSTNAME="wolf-air"

# Paths
TIMEMACHINE_SOURCE_PATH="$SNAPSHOT_ROOT_PATH/$BACKUP_HOME"

RESTORE_NETWORK_ADDRESS="$RESTORE_HOSTNAME.local"
TIMEMACHINE_DESTINATION_PATH="$RESTORE_NETWORK_ADDRESS:$RECOVERY_HOME"

# Fuck TM.  Go live with rsync(1)...
RSYNC_SOURCE_PATH=$HOME
RSYNC_DESTINATION_PATH=$TIMEMACHINE_DESTINATION_PATH

# Dry run mode by default (set to "" to disable)
DRY_RUN_FLAG="--dry-run"

# Precondition: Ensure this script is running on the BACKUP host
CURRENT_HOSTNAME=$(scutil --get LocalHostName)
if [ "$CURRENT_HOSTNAME" != "$BACKUP_HOSTNAME" ]; then
  log_it "Error: This script must be run on $BACKUP_HOSTNAME. Current host is $CURRENT_HOSTNAME. Exiting."
  exit 1
fi


# tmutil(1)...
function do_tmutil_fuckery() {

    log_it tmutil...
    tmutil listlocalsnapshots ~ 2>&1 | log_it

    log_it diskutil list...
    diskutil apfs listSnapshots /System/Volumes/Data 2>&1 | log_it
    
    (
	echo diskutil mount...
	command="sudo diskutil apfs mountSnapshot /System/Volumes/Data -name com.apple.TimeMachine.${SNAPSHOT_DATE}"
	echo "Executing '$command'"
	$command 
    ) 2>&1 | log_it
    
    
    # fakery...
    # sudo tmutil mountsnapshot / "$SNAPSHOT_DATE"
    
    # Wait for it to show up
    if [ ! -d "$SNAPSHOT_ROOT_PATH" ]; then
	log_it "Snapshot did not mount as expected. Exiting."
	exit 1
    fi
}

false && (log_it "WTF - Why are you doing fuckery"; do_tmutil_fuckery)


# Log file
log_it "Restoring: $RSYNC_SOURCE_PATH --> $RSYNC_DESTINATION_PATH"


copy_folder() {
  local folder="$1"
  log_it "Copying $folder to LOANER..."
  # rsync -avh $DRY_RUN_FLAG --progress "$TIMEMACHINE_SOURCE_PATH/$folder" "$TIMEMACHINE_DESTINATION_PATH/" 2>&1 | log_it
  set -x
  rsync -avh $DRY_RUN_FLAG --progress "$RSYNC_SOURCE_PATH/$folder" "$RSYNC_DESTINATION_PATH/" 2>&1 | log_it
  set +x
}

# Copy desired folders
copy_folder "Desktop"
copy_folder "Documents"
copy_folder "Downloads"
copy_folder "Pictures"
copy_folder "Music"
copy_folder "Movies"

# Mail-specific folders
copy_folder "Library/Mail"
copy_folder "Library/Containers/com.apple.mail"
copy_folder "Library/Preferences/com.apple.mail.plist"

log_it "Restore completed at $(date). Check $LOGFILE for details."

# Reminder to unmount if needed
log_it "To unmount snapshot:"
log_it "sudo umount '$SNAPSHOT_ROOT_PATH'"
