#!/bin/bash
set -euo pipefail
# Restore selected files via rsync(1)
#     from ORIGINAL (wendy-pro, FKA Wendys-MacBook) 
#     to LOANER (wolf-air) via rsync
#
# Does NOT use Time Machine or snapshots — live copy only

: "${DRY_RUN_FLAG:=--dry-run}"

SOURCE_HOSTNAME="wendy-pro"
DESTINATION_HOSTNAME="wolf-air"
SOURCE_DIR="$HOME"
DESTINATION_HOME="/Users/wendy"

BINARY_PATH="$(readlink -f "$0")"                      # Full path to the binary
BINARY_DIR="$(dirname "$BINARY_PATH")"                 # Directory containing the binary
BINARY_NAME="$(basename "$BINARY_PATH")"               # Name of the binary (e.g. "binary_name")

LOG_DIR="${BINARY_DIR}/../logs"                        # logs directory alongside the binary dir
mkdir -p "$LOG_DIR"                                    # Ensure logs dir exists

TIMESTAMP="$(date +%Y%m%dT%H:%M:%S)"

LOGFILE="${LOG_DIR}/${TIMESTAMP}_${BINARY_NAME}${DRY_RUN_FLAG}.log"


# Confirm we're on the correct machine
CURRENT_HOSTNAME=$(scutil --get LocalHostName)
if [ "$CURRENT_HOSTNAME" != "$SOURCE_HOSTNAME" ]; then
  echo "❌ ERROR: This script must be run on $SOURCE_HOSTNAME (currently on $CURRENT_HOSTNAME). Exiting."
  exit 1
fi

# Logging function
log_it() {
    if (( $# > 0 )); then
        printf "%s\n" "$*" | tee -a "$LOGFILE"
    else
        tee -a "$LOGFILE"
    fi
}

# Rsync wrapper function
run_rsync() {
    local source="$1"
    local dest="$2"

    if ! [[ -d "$source" ]]; then
	log_it "Skipping non-existant directory: '$source'"
	return
    fi

    # Log the human-readable command
    log_it "Running command: rsync -avh $DRY_RUN_FLAG --progress --exclude stuff \"$source\" $dest"


    # Execute the actual command
    rsync -avh $DRY_RUN_FLAG --progress \
        --exclude 'Library/Caches' \
        --exclude 'Library/Logs' \
        --exclude '*/.DS_Store' \
        --exclude '*/.Trash' \
        --exclude '*/.TemporaryItems' \
        "$source" "$dest" 2>&1 | log_it
}

# Start logging
source_host_spec="$SOURCE_HOSTNAME.local"
destination_host_spec="$DESTINATION_HOSTNAME.local"
log_it "🚀 Restoring: $source_host_spec -> $destination_host_spec"

folders=(
    Desktop
    Documents
    Downloads
    Movies
    Music
    Pictures
    Public
    Library/Accounts
    Library/Mail
    Library/Containers/com.apple.mail
    Library/Preferences/com.apple.mail.plist
)

log_it "For these folders: ${folders[*]}"

for folder in "${folders[@]}"; do
    log_it "🔄 Copying $folder from ${SOURCE_HOSTNAME} to ${DESTINATION_HOSTNAME}..."
    run_rsync "$SOURCE_DIR/$folder" "$destination_host_spec:$DESTINATION_HOME/"
done

log_it "✅ Restore completed. Log saved to: $LOGFILE"
